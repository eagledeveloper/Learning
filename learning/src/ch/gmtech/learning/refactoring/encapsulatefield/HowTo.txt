Motivation

There is a public field. Make it private and provide accessors.
One of the principal tenets of object orientation is encapsulation, or data hiding, never make your data public.
Whit data public, other objects can change and access data values without the owning object's knowing about it.
This separates data from behavior.
It reduces the modularity of the program.
Data and behavior clustered together, it is easier to change the code.
Encapsulate Field begins the process by hiding the data and adding accessors. But it's only the first step.
A class with only accessors is a dumb class.


Mechanics

• Create getting and setting methods for the field.
• Find all clients outside the class that reference the field. If the client uses the value, replace the reference
with a call to the getting method. If the client changes the value, replace the reference with a call to the setting method.
(If the field is an object and the client invokes a modifier on the object, that is a use. Only use the setting method to replace an
assignment)
• Once all clients are changed, declare the field as private
